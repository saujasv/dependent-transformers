from utils import *
from linearize import DependencyTree, ConstituencyTree
import re
import json
import argparse
    
def extract_sentences_from_parse(
        input_file, 
        depparse_file, 
        constparse_file, 
        text_file, 
        dep_lexicalized=False,
        const_lexicalized=False,
        const_pos=False
    ):
    document = json.load(input_file)#.read().encode('utf-8').decode())
    sentences = document['sentences']
    for s in sentences:
        sent_obj = Sentence([Word(index=t['index'], text=t['word']) for t in s['tokens']])
        for d in s['basicDependencies']:
            sent_obj.words[d['dependent'] - 1].governor = d['governor']
            sent_obj.words[d['dependent'] - 1].dependency_relation = d['dep']
        
        deptree = DependencyTree(sent_obj)
        consttree = ConstituencyTree(s['parse'])

        depparse_file.write(deptree.linearize(lexicalized=dep_lexicalized) + '\n')
        constparse_file.write(consttree.linearize(lexicalized=const_lexicalized, pos=const_pos) + '\n')
        text_file.write(' '.join(sent_obj.get_words()) + '\n')

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--parses", type=argparse.FileType('r'), help="File containing parses of source generated by Stanford CoreNLP")
    parser.add_argument("--source_sentences", type=argparse.FileType('w'), help="File containing source sentences")
    parser.add_argument("--linearized_dep_parses", type=argparse.FileType('w'), help="File containing linearized dependency parses")
    parser.add_argument("--lexicalize_dep_parses", type=bool, default=False, nargs='?', help="Use lexicalized dependency parses")
    parser.add_argument("--linearized_const_parses", type=argparse.FileType('w'), help="File containing linearized constituency parses")
    parser.add_argument("--lexicalize_const_parses", type=bool, default=False, nargs='?', help="Use lexicalized constituency parses")
    parser.add_argument("--pos_const_parses", type=bool, default=False, help="Use constituency parses with POS tags")

    args = parser.parse_args()
    extract_sentences_from_parse(
        args.parses, 
        args.linearized_dep_parses, 
        args.linearized_const_parses, 
        args.source_sentences, 
        args.lexicalize_dep_parses, 
        args.lexicalize_const_parses, 
        args.pos_const_parses
    )